from pyrogram import Client, filters
import re
import config
import ccxt
from pybit.unified_trading import HTTP

channel_id = "-1002164329867"  # —Ç–≤–æ–π ID –∫–∞–Ω–∞–ª–∞

app = Client("my_bot")

exchange = ccxt.bybit({
    'apiKey': config.api_key,
    'secret': config.api_secret,
    'options': {'defaultType': 'future'}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—å—é—á–µ—Ä—Å–Ω—ã–π —Ä—ã–Ω–æ–∫
})

client = HTTP(
    api_key=config.api_key,
    api_secret=config.api_secret
)

def get_decimals(symbol):
    markets = exchange.load_markets()
    return markets[symbol]['precision']['price']

def get_order_book(symbol):
    orderbook = exchange.fetchOrderBook(symbol=symbol, limit=10)
    bid = orderbook['bids'][0][0] if orderbook['bids'] else None
    ask = orderbook['asks'][0][0] if orderbook['asks'] else None
    return bid, ask

def get_balance():
    balance = exchange.fetch_balance()
    return balance['USDT']['free']  # –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT

def place_order(action, symbol, price, qty, take_profit, stop_loss):
    side = "Sell" if action == "short" else "Buy"
    opposite_side = "Buy" if action == "short" else "Sell"

    # –°—Ç–∞–≤–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä
    client.place_active_order(
        side=side,
        symbol=symbol,
        order_type="Limit",
        price=price,
        qty=qty,
        time_in_force="GoodTillCancel",
        reduce_only=False,
        close_on_trigger=False
    )
    print(f"–ü–æ—Å—Ç–∞–≤–∏–ª–∏ {action} –æ—Ä–¥–µ—Ä –Ω–∞ {symbol} –ø–æ —Ü–µ–Ω–µ {price}")

    # –°—Ç–∞–≤–∏–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
    client.place_active_order(
        side=opposite_side,
        symbol=symbol,
        order_type="Limit",
        price=take_profit,
        qty=qty,
        time_in_force="GoodTillCancel",
        reduce_only=True,
        close_on_trigger=True
    )
    print(f"–ü–æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä –Ω–∞ {symbol} –ø–æ —Ü–µ–Ω–µ {take_profit}")

    # –°—Ç–∞–≤–∏–º —Å—Ç–æ–ø-–ª–æ—Å—Å
    client.place_active_order(
        side=opposite_side,
        symbol=symbol,
        order_type="Stop",
        stop_px=stop_loss,
        qty=qty,
        base_price=price,
        time_in_force="GoodTillCancel",
        reduce_only=True,
        close_on_trigger=True
    )
    print(f"–ü–æ—Å—Ç–∞–≤–∏–ª–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä –Ω–∞ {symbol} –ø–æ —Ü–µ–Ω–µ {stop_loss}")

def handle_trade(coin, action, price, take_profit, stop_loss):
    symbol = f"{coin}/USDT"
    balance = get_balance()
    
    trade_amount = balance * config.trade_percent
    max_trade_amount = balance * config.max_percent

    bid, ask = get_order_book(symbol)
    current_price = ask if action == "short" else bid

    if current_price:
        decimals = get_decimals(symbol)
        price = round(price, decimals)
        take_profit = round(take_profit, decimals)
        stop_loss = round(stop_loss, decimals)

        qty = trade_amount / current_price
        if qty * current_price > max_trade_amount:
            qty = max_trade_amount / current_price
        qty = round(qty, 4)  # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–æ 4 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π

        place_order(action, symbol, price, qty, take_profit, stop_loss)
    else:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è {symbol}")

@app.on_message(filters.chat(channel_id))
def new_message(client, message):
    text = message.text
    if text:
        match = re.search(r'#bybit #(\w+)\s*üê† (Long|Short)\s*üê† Price: ([\d.]+)\s*üê† Take: ([\d.]+)\s*\(\+[\d.]+%\)\s*üê† Stop: ([\d.]+)\s*\(-[\d.]+%\)', text)
        if match:
            coin = match.group(1)
            action = match.group(2).lower()  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä 'long' –∏–ª–∏ 'short'
            price = float(match.group(3))
            take_profit = float(match.group(4))
            stop_loss = float(match.group(5))
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é
            handle_trade(coin, action, price, take_profit, stop_loss)
            print(f"Parsed Message: {coin}, {action}, {price}, {take_profit}, {stop_loss}")

app.run()
